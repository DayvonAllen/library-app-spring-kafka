package com.example.libraryeventproducer.intg.controller;

import com.example.libraryeventproducer.domain.Book;
import com.example.libraryeventproducer.domain.LibraryEvent;
import org.apache.kafka.clients.consumer.Consumer;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.serialization.IntegerDeserializer;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.*;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.test.EmbeddedKafkaBroker;
import org.springframework.kafka.test.context.EmbeddedKafka;
import org.springframework.kafka.test.utils.KafkaTestUtils;
import org.springframework.test.context.TestPropertySource;


import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

// allows you to override application.properties/yml properties for tests
// $ lets you dynamically grab values from configuration files
// we are overriding the host and port value for our kafka with the embedded kafka values
@TestPropertySource(properties = {"spring.kafka.producer.bootstrap-servers=${spring.embedded.kafka.brokers}",
        "spring.kafka.admin.properties.bootstrap.servers=${spring.embedded.kafka.brokers}"})
// use in memory kafka clusters for integration tests
// embedded kafka is in memory, will spin up for tests and spin down after
@EmbeddedKafka(topics = {"library-events"}, partitions = 1)
// will provide a random port everytime you launch the application(by default it tries to launch on port 8080)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class LibraryControllerIntegrationTest {

    // automatically map to the port generated by spring boot and then you will have an instance of restTemplate
    // cannot use constructor dependency injection
    @Autowired
    private TestRestTemplate restTemplate;

    private Consumer<Integer, String> consumer;

    private String TOPIC = "library-events";

    @Autowired
    EmbeddedKafkaBroker embeddedKafkaBroker;

    @BeforeEach
    void setUp() {
        // we need to pass in configuration into the kafka consumer factory, consumer props takes in arguments
        // and generates configuration for you
        // consumerProps args = (string group, string autoCommit, EmbeddedKafkaBroker embeddedKafka)
        // and (string brokers, string group, string autoCommit)
        Map<String, Object> configs = new HashMap<>(KafkaTestUtils.consumerProps("group1", "true", embeddedKafkaBroker));

//         args = configuration, int deserializer and string deserializer
        consumer = new DefaultKafkaConsumerFactory<>(configs, new IntegerDeserializer(), new StringDeserializer()).createConsumer();
        embeddedKafkaBroker.consumeFromAllEmbeddedTopics(consumer);
    }

    @AfterEach
    void tearDown() {
        // close consumer
        consumer.close();
    }

    @Test
    // waits for 5 seconds then complete execution
    @Timeout(5)
    void postLibraryEvent() {
        Book book = Book.builder().bookId(1).bookName("Moby Dick").bookAuthor("John Doe").build();
        LibraryEvent libraryEvent = LibraryEvent.builder().libraryEventId(1).book(book).build();

        HttpHeaders headers = new HttpHeaders();
        headers.set("content-type", MediaType.APPLICATION_JSON.toString());

        // library event and header
        HttpEntity<LibraryEvent> request = new HttpEntity<>(libraryEvent, headers);

        // controller endpoint, http method, request body(Http Entity), expected return type
        ResponseEntity<LibraryEvent> responseEntity = restTemplate.exchange("/api/v1/library/event",
                HttpMethod.POST, request, LibraryEvent.class);

        // expected status, actual status
        assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());


        ConsumerRecord<Integer, String> consumerRecord = KafkaTestUtils.getSingleRecord(consumer, TOPIC);
        String expectedRecord = "{\"libraryEventId\":1,\"book\":{\"bookId\":1,\"bookName\":\"Moby Dick\",\"bookAuthor\":\"John Doe\"},\"libraryEventType\":\"NEW\"}";
        String value = consumerRecord.value();

        assertEquals(expectedRecord, value);
    }

    @Test
    // waits for 5 seconds then complete execution
    @Timeout(5)
    void putLibraryEvent() {
        Book book = Book.builder().bookId(1).bookName("Moby Dick").bookAuthor("John Doe").build();
        LibraryEvent libraryEvent = LibraryEvent.builder().libraryEventId(1).book(book).build();

        HttpHeaders headers = new HttpHeaders();
        headers.set("content-type", MediaType.APPLICATION_JSON.toString());

        // library event and header
        HttpEntity<LibraryEvent> request = new HttpEntity<>(libraryEvent, headers);

        // controller endpoint, http method, request body(Http Entity), expected return type
        ResponseEntity<LibraryEvent> responseEntity = restTemplate.exchange("/api/v1/library/event",
                HttpMethod.PUT, request, LibraryEvent.class);

        // expected status, actual status
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());


        ConsumerRecord<Integer, String> consumerRecord = KafkaTestUtils.getSingleRecord(consumer, TOPIC);
        String expectedRecord = "{\"libraryEventId\":1,\"book\":{\"bookId\":1,\"bookName\":\"Moby Dick\",\"bookAuthor\":\"John Doe\"},\"libraryEventType\":\"UPDATE\"}";
        String value = consumerRecord.value();

        assertEquals(expectedRecord, value);
    }
}
